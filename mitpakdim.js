// Generated by CoffeeScript 1.4.0
(function() {
  var encode_weights, ga, getShareLink, parse_weights, root, smartSync, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = (_ref = window.mit) != null ? _ref : window.mit = {};

  getShareLink = function(weights) {
    var base, district, fragment, party;
    base = window.location.href.replace(/#.*$/, '');
    party = root.global.party.id;
    district = root.global.district ? root.global.district.id : 'x';
    fragment = "" + party + "/" + district + "/" + (encode_weights(weights));
    return base + '#' + fragment;
  };

  parse_weights = function(weights) {
    var parsed;
    if (!_.isString(weights)) {
      return;
    }
    parsed = {};
    _.each(weights.split('i'), function(item) {
      var key, value, _ref1;
      _ref1 = item.split('x'), key = _ref1[0], value = _ref1[1];
      return parsed[Number(key)] = Number(value);
    });
    return parsed;
  };

  encode_weights = function(weights) {
    var key, value;
    return ((function() {
      var _results;
      _results = [];
      for (key in weights) {
        value = weights[key];
        _results.push("" + key + "x" + value);
      }
      return _results;
    })()).join('i');
  };

  ga = {
    event: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _gaq.push(['_trackEvent'].concat(args));
    },
    social: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return _gaq.push(['_trackSocial'].concat(args));
    }
  };

  $.widget("mit.agendaSlider", $.extend({}, $.ui.slider.prototype, {
    _create: function() {
      this.element.append('<div class="ui-slider-back"></div>');
      this.element.append('<div class="ui-slider-mid-range"></div>');
      this.element.append('<div class="ui-slider-minus-button"></div>');
      this.element.append('<div class="ui-slider-plus-button"></div>');
      return $.ui.slider.prototype._create.apply(this);
    },
    setCandidateMarker: function(value) {
      var candidate_marker_classname, handle;
      candidate_marker_classname = "ui-slider-candidate-marker";
      if (!this.element.find("." + candidate_marker_classname).length) {
        handle = this.element.find(".ui-slider-handle");
        handle.before("<div class='" + candidate_marker_classname + "'></div>");
      }
      return this.element.find("." + candidate_marker_classname).css({
        left: value + "%"
      });
    },
    _refreshValue: function() {
      var range, value;
      $.ui.slider.prototype._refreshValue.apply(this);
      value = this.value();
      range = this.element.find(".ui-slider-mid-range");
      this.element.removeClass("minus plus");
      if (value < 0) {
        this.element.addClass("minus");
        range.css({
          left: (50 + value / 2) + "%",
          right: "50%"
        });
      }
      if (value > 0) {
        this.element.addClass("plus");
        return range.css({
          left: "50%",
          right: (50 - value / 2) + "%"
        });
      }
    }
  }));

  root.syncEx = function(options_override) {
    return function(method, model, options) {
      return Backbone.sync(method, model, _.extend({}, options, options_override));
    };
  };

  root.JSONPCachableSync = function(callback_name) {
    var collisionDict, collisionPrevention;
    collisionDict = {};
    collisionPrevention = function() {
      var callback, callback_value, index;
      callback = callback_name || 'cachable';
      callback_value = _.isFunction(callback) ? callback() : callback;
      index = collisionDict[callback_value] || 0;
      collisionDict[callback_value] = index + 1;
      if (index) {
        callback_value += "__" + index;
      }
      return callback_value;
    };
    return root.syncEx({
      cache: true,
      dataType: 'jsonp',
      jsonpCallback: collisionPrevention
    });
  };

  root.syncOptions = {
    dataType: 'jsonp'
  };

  smartSync = function(method, model, options) {
    var getLocalCopy, localCopy, promise;
    options = _.extend({}, root.syncOptions, model.syncOptions, options);
    getLocalCopy = function() {
      var repo;
      repo = options.repo;
      repo = _.isString(repo) ? root[repo] : repo;
      if (method !== 'read' || !repo) {
        return null;
      }
      if (model instanceof Backbone.Collection) {
        return repo;
      }
      return _.where(repo.objects, {
        id: model.id
      })[0];
    };
    if (localCopy = _.clone(getLocalCopy())) {
      promise = $.Deferred();
      _.defer(function() {
        if (_.isFunction(options.success)) {
          options.success(localCopy, null);
        }
        return promise.resolve(localCopy, null);
      });
      return promise;
    }
    return (options.sync || Backbone.sync)(method, model, options);
  };

  root.MiscModel = (function(_super) {

    __extends(MiscModel, _super);

    function MiscModel() {
      return MiscModel.__super__.constructor.apply(this, arguments);
    }

    return MiscModel;

  })(Backbone.Model);

  root.Agenda = (function(_super) {

    __extends(Agenda, _super);

    function Agenda() {
      return Agenda.__super__.constructor.apply(this, arguments);
    }

    Agenda.prototype.defaults = {
      uservalue: 0
    };

    return Agenda;

  })(Backbone.Model);

  root.JSONPCollection = (function(_super) {

    __extends(JSONPCollection, _super);

    function JSONPCollection() {
      return JSONPCollection.__super__.constructor.apply(this, arguments);
    }

    JSONPCollection.prototype.sync = smartSync;

    JSONPCollection.prototype.initialize = function() {
      return JSONPCollection.__super__.initialize.apply(this, arguments);
    };

    JSONPCollection.prototype.parse = function(response) {
      return response.objects;
    };

    return JSONPCollection;

  })(Backbone.Collection);

  root.AgendaList = (function(_super) {

    __extends(AgendaList, _super);

    function AgendaList() {
      return AgendaList.__super__.constructor.apply(this, arguments);
    }

    AgendaList.prototype.model = root.Agenda;

    AgendaList.prototype.url = "http://www.oknesset.org/api/v2/agenda/";

    AgendaList.prototype.syncOptions = {
      disable_repo: window.mit.agenda,
      sync: root.JSONPCachableSync('agendas')
    };

    return AgendaList;

  })(root.JSONPCollection);

  root.TemplateView = (function(_super) {

    __extends(TemplateView, _super);

    function TemplateView() {
      this.render = __bind(this.render, this);
      return TemplateView.__super__.constructor.apply(this, arguments);
    }

    TemplateView.prototype.template = function() {
      return _.template(this.get_template()).apply(null, arguments);
    };

    TemplateView.prototype.digestData = function(data) {
      return data;
    };

    TemplateView.prototype.render = function() {
      this.$el.html(this.template(this.digestData(this.model.toJSON())));
      return this;
    };

    return TemplateView;

  })(Backbone.View);

  root.ListViewItem = (function(_super) {

    __extends(ListViewItem, _super);

    function ListViewItem() {
      return ListViewItem.__super__.constructor.apply(this, arguments);
    }

    ListViewItem.prototype.tagName = "div";

    ListViewItem.prototype.get_template = function() {
      return "<a href='#'><%= name %></a>";
    };

    ListViewItem.prototype.events = {
      click: "onClick"
    };

    ListViewItem.prototype.onClick = function() {
      return this.trigger('click', this.model, this);
    };

    return ListViewItem;

  })(root.TemplateView);

  root.ListView = (function(_super) {

    __extends(ListView, _super);

    function ListView() {
      this.itemEvent = __bind(this.itemEvent, this);

      this.initEmptyView = __bind(this.initEmptyView, this);

      this.addAll = __bind(this.addAll, this);

      this.addOne = __bind(this.addOne, this);
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.initialize = function() {
      var _base, _base1, _ref1, _ref2;
      ListView.__super__.initialize.apply(this, arguments);
      if ((_ref1 = (_base = this.options).itemView) == null) {
        _base.itemView = root.ListViewItem;
      }
      if ((_ref2 = (_base1 = this.options).autofetch) == null) {
        _base1.autofetch = true;
      }
      if (this.options.collection) {
        return this.setCollection(this.options.collection);
      }
    };

    ListView.prototype.setCollection = function(collection) {
      this.collection = collection;
      this.collection.on("add", this.addOne);
      this.collection.on("reset", this.addAll);
      if (this.options.autofetch) {
        return this.collection.fetch();
      } else {
        return this.addAll();
      }
    };

    ListView.prototype.addOne = function(modelInstance) {
      var view;
      view = new this.options.itemView({
        model: modelInstance
      });
      view.on('all', this.itemEvent);
      return this.$el.append(view.render().$el);
    };

    ListView.prototype.addAll = function() {
      this.initEmptyView();
      return this.collection.each(this.addOne);
    };

    ListView.prototype.initEmptyView = function() {
      return this.$el.empty();
    };

    ListView.prototype.itemEvent = function() {
      return this.trigger.apply(this, arguments);
    };

    return ListView;

  })(root.TemplateView);

  root.AgendaListView = (function(_super) {

    __extends(AgendaListView, _super);

    function AgendaListView() {
      return AgendaListView.__super__.constructor.apply(this, arguments);
    }

    AgendaListView.prototype.el = '.agendas';

    AgendaListView.prototype.options = {
      collection: new root.AgendaList,
      itemView: (function(_super1) {

        __extends(_Class, _super1);

        function _Class() {
          this.onStop = __bind(this.onStop, this);
          return _Class.__super__.constructor.apply(this, arguments);
        }

        _Class.prototype.className = "agenda_item";

        _Class.prototype.render = function() {
          _Class.__super__.render.call(this);
          this.$('.slider').agendaSlider({
            min: -100,
            max: 100,
            value: this.model.get("uservalue"),
            stop: this.onStop
          });
          return this;
        };

        _Class.prototype.onStop = function(event, ui) {
          var slider;
          slider = $(ui.handle).closest('.slider');
          if (ui.value <= 5 && ui.value >= -5) {
            slider.agendaSlider("value", 0);
            ui.value = 0;
          }
          this.model.set({
            uservalue: ui.value
          });
          return this.trigger('slider_stop', this.model, slider);
        };

        _Class.prototype.get_template = function() {
          return $("#agenda_template").html();
        };

        return _Class;

      })(root.ListViewItem)
    };

    AgendaListView.prototype.reset = function(weights) {
      return this.collection.each(function(agenda, index) {
        var value;
        if (_.isNumber(value = weights[agenda.id])) {
          agenda.set("uservalue", value);
          return this.$(".slider").eq(index).agendaSlider("value", value);
        }
      });
    };

    AgendaListView.prototype.getWeights = function() {
      var weights,
        _this = this;
      weights = {};
      this.collection.each(function(agenda) {
        return weights[agenda.id] = agenda.get("uservalue");
      });
      return weights;
    };

    return AgendaListView;

  }).call(this, root.ListView);

  root.WeightBankView = (function(_super) {

    __extends(WeightBankView, _super);

    function WeightBankView() {
      return WeightBankView.__super__.constructor.apply(this, arguments);
    }

    WeightBankView.prototype.el = '.weight_bank';

    WeightBankView.prototype.initialize = function() {
      WeightBankView.__super__.initialize.apply(this, arguments);
      return this.model.on('change', this.render);
    };

    WeightBankView.prototype.get_template = function() {
      return $("#bank_template").html();
    };

    return WeightBankView;

  })(root.TemplateView);

  root.AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      this.initialize = __bind(this.initialize, this);
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = '#app_root';

    AppView.prototype.initialize = function() {
      var _this = this;
      this.bank = new Backbone.Model({
        points_total: 500,
        points_left: 500
      });
      this.bankView = new root.WeightBankView({
        model: this.bank
      });
      this.bankView.render();
      this.agendaListView = new root.AgendaListView;
      return this.agendaListView.on('slider_stop', function(model, slider) {
        var abs, abs_sum, diff, fixedvalue, left, sign, uservalue, weight_sum;
        abs_sum = function(arr) {
          var do_sum;
          do_sum = function(memo, item) {
            return memo += Math.abs(item);
          };
          return _.reduce(arr, do_sum, 0);
        };
        weight_sum = abs_sum(_this.agendaListView.getWeights());
        left = _this.bank.get('points_total') - weight_sum;
        if (left < 0) {
          uservalue = model.get('uservalue');
          abs = Math.abs(uservalue);
          sign = uservalue / abs;
          diff = -left;
          fixedvalue = abs < diff ? 0 : (abs - diff) * sign;
          model.set('uservalue', fixedvalue);
          slider.agendaSlider("value", fixedvalue);
          weight_sum -= Math.abs(uservalue - fixedvalue);
        }
        return _this.bank.set('points_left', _this.bank.get('points_total') - weight_sum);
      });
    };

    AppView.prototype.events = {
      'click input:button#update': function(event) {
        var encoded, setStatus,
          _this = this;
        encoded = encode_weights(this.agendaListView.getWeights());
        setStatus = function(status) {
          var set;
          set = function(text) {
            return this.$('.update_data .status').text(text);
          };
          switch (status) {
            case 'updating':
              return set('מעדכן...');
            case 'success':
              return set('נשמר - תודה!');
            case 'error':
              return set('שגיאה בשמירה - אנא התחבר מחדש ונסה שנית');
          }
        };
        setStatus('updating');
        return $.post('update_agendas.php', {
          agendas: encoded
        }).done(function(resp, status) {
          if (resp.type === 'success') {
            return setStatus('success');
          } else {
            return setStatus('error');
          }
        }).fail(function() {
          return setStatus('error');
        });
      },
      'click input:button#show_weights': function(event) {
        var instructions;
        instructions = "\u05DC\u05D4\u05E2\u05EA\u05E7\u05D4\u0020\u05DC\u05D7\u05E5\u0020\u05E2\u05DC\u0020\u05E6\u05D9\u05E8\u05D5\u05E3\u0020\u05D4\u05DE\u05E7\u05E9\u05D9\u05DD\u000A\u0043\u0074\u0072\u006C\u002B\u0043";
        return window.prompt(instructions, encode_weights(this.agendaListView.getWeights()));
      }
    };

    return AppView;

  })(Backbone.View);

  $(function() {
    root.appView = new root.AppView;
  });

}).call(this);
